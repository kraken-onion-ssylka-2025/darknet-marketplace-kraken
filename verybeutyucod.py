# === –î–ù–ï–í–ù–ò–ö –ê–õ–¨–¢–ï–† –≠–ì–û ===
# –ê–≤—Ç–æ—Ä: –°–µ–Ω—å–æ—Ä Python-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ (—ç—Ç–æ —è üòâ)
# –í–µ—Ä—Å–∏—è: 1.0 ‚Äî –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ –ª—é–±–∏—Ç –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å —Å–∞–º–∏–º —Å–æ–±–æ–π... –ø–æ-—Ä–∞–∑–Ω–æ–º—É.

import datetime
import random
import os
import json

FILENAME = "alterego_diary.json"

# --- –õ–∏—á–Ω–æ—Å—Ç–∏ ---
PERSONAS = {
    "–§–∏–ª–æ—Å–æ—Ñ": {
        "–æ–ø–∏—Å–∞–Ω–∏–µ": "–ì–æ–≤–æ—Ä–∏—Ç –∑–∞–≥–∞–¥–∫–∞–º–∏, –∏—â–µ—Ç —Å–º—ã—Å–ª –≤ –∫–∞–∂–¥–æ–π –∑–∞–ø—è—Ç–æ–π.",
        "—Ä–µ–∞–∫—Ü–∏–∏": [
            "–ï—Å–ª–∏ —Ç—ã —ç—Ç–æ –∑–∞–ø–∏—Å–∞–ª ‚Äî –∑–Ω–∞—á–∏—Ç, —ç—Ç–æ —É–∂–µ —á–∞—Å—Ç—å —Ç–≤–æ–µ–π –≤—Å–µ–ª–µ–Ω–Ω–æ–π. –ß—Ç–æ –æ–Ω–∞ —Ç–µ–±–µ –≥–æ–≤–æ—Ä–∏—Ç?",
            "–ó–∞–¥—É–º—ã–≤–∞–ª—Å—è, –ø–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ –≠–¢–û —Ç—ã —Ä–µ—à–∏–ª —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å?..",
            "–í—Ä–µ–º—è —Å—Ç–∏—Ä–∞–µ—Ç –≤—Å—ë. –ù–æ —Å–ª–æ–≤–∞ ‚Äî –æ—Å—Ç–∞—é—Ç—Å—è. –ó–∞—á–µ–º —Ç—ã –∏—Ö –æ—Å—Ç–∞–≤–∏–ª?",
            "–¢—ã ‚Äî –∞–≤—Ç–æ—Ä —ç—Ç–æ–π –∏—Å—Ç–æ—Ä–∏–∏. –ü—Ä–æ–¥–æ–ª–∂–∏—à—å –ª–∏ –µ—ë –∑–∞–≤—Ç—Ä–∞?"
        ]
    },
    "–°–∞—Ä–∫–∞—Å—Ç–∏–∫": {
        "–æ–ø–∏—Å–∞–Ω–∏–µ": "–û—Ç–≤–µ—á–∞–µ—Ç —Å –µ—Ö–∏–¥—Å—Ç–≤–æ–º, –Ω–æ –ø–æ –¥–µ–ª—É.",
        "—Ä–µ–∞–∫—Ü–∏–∏": [
            "–û, –æ–ø—è—Ç—å –∫—Ä–∏–∑–∏—Å? –î–∞–≤–∞–π, —Ä–∞–∑–ª–æ–∂–∏–º –ø–æ –ø–æ–ª–æ—á–∫–∞–º ‚Äî –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã —Å–∞–º –∏ —Å–≤–∞–ª–∏–ª.",
            "–ó–∞–ø–∏—Å–∞–ª? –¢–µ–ø–µ—Ä—å —ç—Ç–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ. –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç—ã —Ç–µ–ø–µ—Ä—å —Å–≤–∏–¥–µ—Ç–µ–ª—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π –¥—Ä–∞–º—ã.",
            "–ï—Å–ª–∏ –±—ã —Ç—ã —ç—Ç–æ —Å–¥–µ–ª–∞–ª –≤—á–µ—Ä–∞ ‚Äî —Å–µ–≥–æ–¥–Ω—è –±—ã —á–∏—Ç–∞–ª —á—Ç–æ-—Ç–æ –±–æ–ª–µ–µ —Ä–∞–¥–æ—Å—Ç–Ω–æ–µ.",
            "–ù—É –Ω–∞–∫–æ–Ω–µ—Ü-—Ç–æ! –ê —è —É–∂ –¥—É–º–∞–ª, —Ç—ã –∑–∞–±—ã–ª, —á—Ç–æ —É —Ç–µ–±—è –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã."
        ]
    },
    "–ö–æ—É—á": {
        "–æ–ø–∏—Å–∞–Ω–∏–µ": "–í–æ–æ–¥—É—à–µ–≤–ª—è–µ—Ç, —Ö–≤–∞–ª–∏—Ç, —Å—Ç–∞–≤–∏—Ç —Ü–µ–ª–∏.",
        "—Ä–µ–∞–∫—Ü–∏–∏": [
            "–¢—ã –º–æ–ª–æ–¥–µ—Ü, —á—Ç–æ –≤—ã–≥–æ–≤–æ—Ä–∏–ª—Å—è! –≠—Ç–æ –ø–µ—Ä–≤—ã–π —à–∞–≥ –∫ –ø–µ—Ä–µ–º–µ–Ω–∞–º üí™",
            "–ü—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ —ç—Ç–∞ –∑–∞–ø–∏—Å—å ‚Äî –ø–∏—Å—å–º–æ —Å–µ–±–µ —á–µ—Ä–µ–∑ –≥–æ–¥. –ß—Ç–æ –±—ã —Ç—ã —Ö–æ—Ç–µ–ª –ø—Ä–æ—á–∏—Ç–∞—Ç—å?",
            "–Ø –≤–µ—Ä—é, —á—Ç–æ —Ç—ã —Å–ø—Ä–∞–≤–∏—à—å—Å—è. –ò –∑–Ω–∞–µ—à—å —á—Ç–æ? –¢—ã —É–∂–µ –Ω–∞ –ø–æ–ª–ø—É—Ç–∏!",
            "–≠—Ç–æ –Ω–µ –ø—Ä–æ–±–ª–µ–º–∞ ‚Äî —ç—Ç–æ –∑–∞–¥–∞—á–∞. –ò —Ç—ã ‚Äî —á–µ–ª–æ–≤–µ–∫, –∫–æ—Ç–æ—Ä—ã–π –µ—ë —Ä–µ—à–∏—Ç."
        ]
    },
    "–î–µ—Ç–µ–∫—Ç–∏–≤": {
        "–æ–ø–∏—Å–∞–Ω–∏–µ": "–ò—â–µ—Ç —Å–∫—Ä—ã—Ç—ã–µ –º–æ—Ç–∏–≤—ã, –∑–∞–¥–∞—ë—Ç –Ω–µ—É–¥–æ–±–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã.",
        "—Ä–µ–∞–∫—Ü–∏–∏": [
            "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ... –ê —á—Ç–æ, –µ—Å–ª–∏ –Ω–∞—Å—Ç–æ—è—â–∞—è –ø—Ä–∏—á–∏–Ω–∞ ‚Äî –Ω–µ –≤ —ç—Ç–æ–º, –∞ –Ω–∞ –¥–≤–∞ –∞–±–∑–∞—Ü–∞ –≤—ã—à–µ?",
            "–ö—Ç–æ –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç, –µ—Å–ª–∏ —Ç—ã –ø—Ä–æ–¥–æ–ª–∂–∞–µ—à—å —Ç–∞–∫ –¥—É–º–∞—Ç—å? –ü–æ–¥–æ–∑—Ä–µ–≤–∞—é ‚Äî –Ω–µ —Ç—ã.",
            "–¢—ã —Å–∫–∞–∑–∞–ª '–≤—Å—ë –Ω–æ—Ä–º–∞–ª—å–Ω–æ', –Ω–æ –∑–∞–ø–∏—Å–∞–ª —Ü–µ–ª—ã–π –∞–±–∑–∞—Ü. –ß—Ç–æ –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç?",
            "–ó–∞–º–µ—Ç–∏–ª(–∞) —à–∞–±–ª–æ–Ω? –≠—Ç–æ —É–∂–µ —Ç—Ä–µ—Ç—å—è –∑–∞–ø–∏—Å—å —Å —Ç–∞–∫–∏–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ–º. –°–ª—É—á–∞–π–Ω–æ—Å—Ç—å?"
        ]
    }
}

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –¥–Ω–µ–≤–Ω–∏–∫–∞ ---
def load_diary():
    if os.path.exists(FILENAME):
        with open(FILENAME, "r", encoding="utf-8") as f:
            return json.load(f)
    return []

# --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ ---
def save_entry(entry, persona_name):
    diary = load_diary()
    record = {
        "datetime": datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "persona": persona_name,
        "text": entry,
        "response": random.choice(PERSONAS[persona_name]["—Ä–µ–∞–∫—Ü–∏–∏"])
    }
    diary.append(record)
    with open(FILENAME, "w", encoding="utf-8") as f:
        json.dump(diary, f, ensure_ascii=False, indent=2)
    return record

# --- –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é ---
def show_history():
    diary = load_diary()
    if not diary:
        print("–î–Ω–µ–≤–Ω–∏–∫ –ø—É—Å—Ç. –ù–∞—á–Ω–∏ –ø–∏—Å–∞—Ç—å ‚Äî –∏ –ª–∏—á–Ω–æ—Å—Ç–∏ –æ–∂–∏–≤—É—Ç!")
        return
    print("\n" + "="*60)
    for i, entry in enumerate(diary, 1):
        print(f"[{i}] {entry['datetime']} | {entry['persona']}")
        print(f"   –¢—ã: {entry['text']}")
        print(f"   üé≠ {entry['persona']}: {entry['response']}")
        print("-" * 60)

# --- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ---
def show_stats():
    diary = load_diary()
    if not diary:
        print("–ù–µ—á–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å ‚Äî –¥–Ω–µ–≤–Ω–∏–∫ –ø—É—Å—Ç!")
        return

    total = len(diary)
    personas_count = {}
    for entry in diary:
        personas_count[entry["persona"]] = personas_count.get(entry["persona"], 0) + 1

    print(f"\nüìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total}")
    print("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ª–∏—á–Ω–æ—Å—Ç—è–º:")
    for persona, count in personas_count.items():
        print(f"  {persona}: {count} ({count/total*100:.1f}%)")

# --- –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª ---
def main():
    print("üìì –î–û–ë–†–û –ü–û–ñ–ê–õ–û–í–ê–¢–¨ –í –î–ù–ï–í–ù–ò–ö –ê–õ–¨–¢–ï–† –≠–ì–û üìì")
    print("–ü–∏—à–∏ –≤—Å—ë, —á—Ç–æ –¥—É–º–∞–µ—à—å. –õ–∏—á–Ω–æ—Å—Ç—å –≤—ã–±–µ—Ä–µ—Ç—Å—è —Å–ª—É—á–∞–π–Ω–æ –∏ –æ—Ç–≤–µ—Ç–∏—Ç.")
    print("–ö–æ–º–∞–Ω–¥—ã: /quit ‚Äî –≤—ã–π—Ç–∏, /history ‚Äî –∏—Å—Ç–æ—Ä–∏—è, /stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, /switch ‚Äî –≤—ã–±—Ä–∞—Ç—å –ª–∏—á–Ω–æ—Å—Ç—å\n")

    current_persona = None

    while True:
        if not current_persona:
            persona_name = random.choice(list(PERSONAS.keys()))
        else:
            persona_name = current_persona

        print(f"\nüé≠ –°–µ–π—á–∞—Å –≥–æ–≤–æ—Ä–∏—Ç: {persona_name}")
        print(f"   (–û–ø–∏—Å–∞–Ω–∏–µ: {PERSONAS[persona_name]['–æ–ø–∏—Å–∞–Ω–∏–µ']})")

        user_input = input("\n–¢–≤–æ–∏ –º—ã—Å–ª–∏ (–∏–ª–∏ –∫–æ–º–∞–Ω–¥–∞): ").strip()

        if user_input.lower() == "/quit":
            print("\n–î–æ –≤—Å—Ç—Ä–µ—á–∏. –ù–µ –∑–∞–±—ã–≤–∞–π ‚Äî —Ç–≤–æ–∏ –º—ã—Å–ª–∏ –≤–∞–∂–Ω—ã. üí≠")
            break

        elif user_input.lower() == "/history":
            show_history()

        elif user_input.lower() == "/stats":
            show_stats()

        elif user_input.lower() == "/switch":
            print("\n–í—ã–±–µ—Ä–∏ –ª–∏—á–Ω–æ—Å—Ç—å:")
            for i, name in enumerate(PERSONAS.keys(), 1):
                print(f"  {i}. {name} ‚Äî {PERSONAS[name]['–æ–ø–∏—Å–∞–Ω–∏–µ']}")
            try:
                choice = int(input("–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä: ")) - 1
                current_persona = list(PERSONAS.keys())[choice]
                print(f"‚úÖ –¢–µ–ø–µ—Ä—å –≤—Å–µ–≥–¥–∞ –≥–æ–≤–æ—Ä–∏—Ç: {current_persona}")
            except (ValueError, IndexError):
                print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –õ–∏—á–Ω–æ—Å—Ç—å –æ—Å—Ç–∞–ª–∞—Å—å –ø—Ä–µ–∂–Ω–µ–π.")

        elif user_input:
            record = save_entry(user_input, persona_name)
            print(f"\nüé≠ {persona_name} –æ—Ç–≤–µ—á–∞–µ—Ç:")
            print(f"   \"{record['response']}\"")
            current_persona = None  # —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ ‚Äî —Å–Ω–æ–≤–∞ —Å–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä

        else:
            print("–ü—É—Å—Ç–∞—è –∑–∞–ø–∏—Å—å –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è.")

if __name__ == "__main__":
    main()
